// Code generated by sqlc. DO NOT EDIT.
// source: book_group_art.sql

package db

import (
	"context"
)

const deleteCoverOfBookGroup = `-- name: DeleteCoverOfBookGroup :exec
DELETE
FROM book_group_arts
WHERE book_group_id = $1
`

func (q *Queries) DeleteCoverOfBookGroup(ctx context.Context, bookGroupID int32) error {
	_, err := q.db.Exec(ctx, deleteCoverOfBookGroup, bookGroupID)
	return err
}

const getCoverIdsOfBookGroup = `-- name: GetCoverIdsOfBookGroup :many
SELECT image_id
FROM book_group_arts
WHERE book_group_id = $1
`

func (q *Queries) GetCoverIdsOfBookGroup(ctx context.Context, bookGroupID int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, getCoverIdsOfBookGroup, bookGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var image_id int32
		if err := rows.Scan(&image_id); err != nil {
			return nil, err
		}
		items = append(items, image_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBookGroupArt = `-- name: InsertBookGroupArt :one
INSERT INTO book_group_arts(book_group_id, image_id)
VALUES ($1, $2)
RETURNING book_group_id, image_id
`

type InsertBookGroupArtParams struct {
	BookGroupID int32 `json:"bookGroupID"`
	ImageID     int32 `json:"imageID"`
}

func (q *Queries) InsertBookGroupArt(ctx context.Context, arg InsertBookGroupArtParams) (BookGroupArt, error) {
	row := q.db.QueryRow(ctx, insertBookGroupArt, arg.BookGroupID, arg.ImageID)
	var i BookGroupArt
	err := row.Scan(&i.BookGroupID, &i.ImageID)
	return i, err
}
