// Code generated by sqlc. DO NOT EDIT.
// source: genre.sql

package db

import (
	"context"
	"database/sql"
)

const checkGenreExistById = `-- name: CheckGenreExistById :one
SELECT EXISTS(
   SELECT 1
   FROM genres
   WHERE id = $1
)
`

func (q *Queries) CheckGenreExistById(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkGenreExistById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteGenre = `-- name: DeleteGenre :exec
DELETE
FROM genres
WHERE id = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGenre, id)
	return err
}

const genreById = `-- name: GenreById :one
SELECT id, name, description, image_id
FROM genres
WHERE id = $1
`

func (q *Queries) GenreById(ctx context.Context, id int32) (Genre, error) {
	row := q.db.QueryRow(ctx, genreById, id)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageID,
	)
	return i, err
}

const getAllGenre = `-- name: GetAllGenre :many
SELECT name, id
FROM genres
ORDER BY name ASC
`

type GetAllGenreRow struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) GetAllGenre(ctx context.Context) ([]GetAllGenreRow, error) {
	rows, err := q.db.Query(ctx, getAllGenre)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGenreRow
	for rows.Next() {
		var i GetAllGenreRow
		if err := rows.Scan(&i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGenre = `-- name: InsertGenre :one
INSERT INTO genres(name, description, image_id)
VALUES ($1, $2, $3)
RETURNING id, name, description, image_id
`

type InsertGenreParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ImageID     sql.NullInt32  `json:"imageID"`
}

func (q *Queries) InsertGenre(ctx context.Context, arg InsertGenreParams) (Genre, error) {
	row := q.db.QueryRow(ctx, insertGenre, arg.Name, arg.Description, arg.ImageID)
	var i Genre
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageID,
	)
	return i, err
}

const updateGenre = `-- name: UpdateGenre :exec
UPDATE genres
SET name        = $2,
    description = $3,
    image_id    = $4
WHERE id = $1
`

type UpdateGenreParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ImageID     sql.NullInt32  `json:"imageID"`
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) error {
	_, err := q.db.Exec(ctx, updateGenre,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ImageID,
	)
	return err
}
