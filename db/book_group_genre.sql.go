// Code generated by sqlc. DO NOT EDIT.
// source: book_group_genre.sql

package db

import (
	"context"
)

const allBookGroupGenre = `-- name: AllBookGroupGenre :many
SELECT book_group_id, genre_id
FROM book_group_genres
ORDER BY book_group_id,genre_id
`

func (q *Queries) AllBookGroupGenre(ctx context.Context) ([]BookGroupGenre, error) {
	rows, err := q.db.Query(ctx, allBookGroupGenre)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookGroupGenre
	for rows.Next() {
		var i BookGroupGenre
		if err := rows.Scan(&i.BookGroupID, &i.GenreID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bookGroupGenre = `-- name: BookGroupGenre :one
SELECT EXISTS(
   SELECT 1
   FROM book_group_genres
   WHERE book_group_id = $1
     AND genre_id = $2
)
`

type BookGroupGenreParams struct {
	BookGroupID int32 `json:"bookGroupID"`
	GenreID     int32 `json:"genreID"`
}

func (q *Queries) BookGroupGenre(ctx context.Context, arg BookGroupGenreParams) (bool, error) {
	row := q.db.QueryRow(ctx, bookGroupGenre, arg.BookGroupID, arg.GenreID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const bookGroupsByGenre = `-- name: BookGroupsByGenre :many
SELECT bgg.book_group_id id,
       (array_agg(i.path))[1] AS image,
       (array_agg(bg.title))[1] title,
       bct.latest_chapter,
       bct.last_updated,
       bct.views,
       bcm.comments,
       bgl.likes
FROM book_group_genres AS bgg
         LEFT JOIN book_groups AS bg ON bgg.book_group_id = bg.id
         LEFT JOIN Lateral (
    SELECT count(bcm.id) AS comments
    FROM book_comments bcm
    WHERE bcm.book_group_id = bgg.book_group_id
    ) bcm ON TRUE
         LEFT JOIN Lateral (
    SELECT coalesce(sum(bgl.point), 0) AS likes
    FROM book_group_likes bgl
    WHERE bgl.book_group_id = bgg.book_group_id
    ) bgl ON TRUE
         LEFT JOIN LATERAL (
    SELECT (array_agg(bct.chapter_number ORDER BY bct.date_created DESC))[1] AS latest_chapter,
           MAX(bct.date_created) AS last_updated,
           coalesce(sum(bcv.count),0) AS views
    FROM book_chapters bct
             LEFT JOIN book_chapter_views bcv
                       ON bct.id = bcv.book_chapter_id
    WHERE bct.book_group_id = bgg.book_group_id
    ) bct ON TRUE
         LEFT JOIN images i ON bg.primary_cover_art_id = i.id
WHERE bgg.genre_id = $1
GROUP BY bgg.book_group_id, bg.title, i.path, bct.latest_chapter, bct.last_updated, bct.views, bcm.comments, bgl.likes
ORDER BY last_updated DESC  NULLS LAST
OFFSET $2 ROWS FETCH FIRST $3 ROWS ONLY
`

type BookGroupsByGenreParams struct {
	GenreID int32 `json:"genreID"`
	Offset  int32 `json:"offset"`
	Limit   int32 `json:"limit"`
}

type BookGroupsByGenreRow struct {
	ID            int32       `json:"id"`
	Image         interface{} `json:"image"`
	Title         interface{} `json:"title"`
	LatestChapter interface{} `json:"latestChapter"`
	LastUpdated   interface{} `json:"lastUpdated"`
	Views         interface{} `json:"views"`
	Comments      int64       `json:"comments"`
	Likes         interface{} `json:"likes"`
}

func (q *Queries) BookGroupsByGenre(ctx context.Context, arg BookGroupsByGenreParams) ([]BookGroupsByGenreRow, error) {
	rows, err := q.db.Query(ctx, bookGroupsByGenre, arg.GenreID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookGroupsByGenreRow
	for rows.Next() {
		var i BookGroupsByGenreRow
		if err := rows.Scan(
			&i.ID,
			&i.Image,
			&i.Title,
			&i.LatestChapter,
			&i.LastUpdated,
			&i.Views,
			&i.Comments,
			&i.Likes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const delBookGroupGenresByBookGroup = `-- name: DelBookGroupGenresByBookGroup :exec
DELETE
FROM book_group_genres
WHERE book_group_id = $1
`

func (q *Queries) DelBookGroupGenresByBookGroup(ctx context.Context, bookGroupID int32) error {
	_, err := q.db.Exec(ctx, delBookGroupGenresByBookGroup, bookGroupID)
	return err
}

const delBookGroupGenresByGenre = `-- name: DelBookGroupGenresByGenre :exec
DELETE
FROM book_group_genres
WHERE genre_id = $1
`

func (q *Queries) DelBookGroupGenresByGenre(ctx context.Context, genreID int32) error {
	_, err := q.db.Exec(ctx, delBookGroupGenresByGenre, genreID)
	return err
}

const deleteBookGroupGenre = `-- name: DeleteBookGroupGenre :exec
DELETE
FROM book_group_genres
WHERE book_group_id = $1
  AND genre_id = $2
`

type DeleteBookGroupGenreParams struct {
	BookGroupID int32 `json:"bookGroupID"`
	GenreID     int32 `json:"genreID"`
}

func (q *Queries) DeleteBookGroupGenre(ctx context.Context, arg DeleteBookGroupGenreParams) error {
	_, err := q.db.Exec(ctx, deleteBookGroupGenre, arg.BookGroupID, arg.GenreID)
	return err
}

const genresByBookGroup = `-- name: GenresByBookGroup :many
SELECT bgg.genre_id
FROM book_group_genres AS bgg
WHERE bgg.book_group_id = $1
ORDER BY bgg.genre_id
OFFSET $2 ROWS FETCH FIRST $3 ROWS ONLY
`

type GenresByBookGroupParams struct {
	BookGroupID int32 `json:"bookGroupID"`
	Offset      int32 `json:"offset"`
	Limit       int32 `json:"limit"`
}

func (q *Queries) GenresByBookGroup(ctx context.Context, arg GenresByBookGroupParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, genresByBookGroup, arg.BookGroupID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var genre_id int32
		if err := rows.Scan(&genre_id); err != nil {
			return nil, err
		}
		items = append(items, genre_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookGroupGenres = `-- name: GetBookGroupGenres :many
SELECT genres.id, genres.name
FROM genres JOIN book_group_genres bgg on genres.id = bgg.genre_id
            JOIN book_groups bg on bgg.book_group_id = bg.id
WHERE bg.id = $1
`

type GetBookGroupGenresRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetBookGroupGenres(ctx context.Context, id int32) ([]GetBookGroupGenresRow, error) {
	rows, err := q.db.Query(ctx, getBookGroupGenres, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookGroupGenresRow
	for rows.Next() {
		var i GetBookGroupGenresRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBookGroupGenre = `-- name: InsertBookGroupGenre :one
INSERT INTO book_group_genres(book_group_id, genre_id)
VALUES ($1, $2)
RETURNING book_group_id, genre_id
`

type InsertBookGroupGenreParams struct {
	BookGroupID int32 `json:"bookGroupID"`
	GenreID     int32 `json:"genreID"`
}

func (q *Queries) InsertBookGroupGenre(ctx context.Context, arg InsertBookGroupGenreParams) (BookGroupGenre, error) {
	row := q.db.QueryRow(ctx, insertBookGroupGenre, arg.BookGroupID, arg.GenreID)
	var i BookGroupGenre
	err := row.Scan(&i.BookGroupID, &i.GenreID)
	return i, err
}

const numberRowBookGroupInGenre = `-- name: NumberRowBookGroupInGenre :one
SELECT count(*)
FROM book_group_genres
WHERE genre_id = $1
`

func (q *Queries) NumberRowBookGroupInGenre(ctx context.Context, genreID int32) (int64, error) {
	row := q.db.QueryRow(ctx, numberRowBookGroupInGenre, genreID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
